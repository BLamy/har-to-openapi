const STANDARD_HEADERS = [
  "a-im",
  "accept",
  "accept-charset",
  "accept-datetime",
  "accept-encoding",
  "accept-language",
  "accept-ranges",
  "accept-control-allow-origin",
  "access-control-request-method",
  "access-control-request-headers",
  "cache-control",
  "connection",
  "content-encoding",
  "content-length",
  "content-md5",
  "content-type",
  "cookie",
  "date",
  "expect",
  "forwarded",
  "from",
  "host",
  "http2-settings",
  "if-match",
  "if-modified-since",
  "if-none-match",
  "if-range",
  "if-unmodified-since",
  "max-forwards",
  "origin",
  "pragma",
  "prefer",
  "proxy-authorization",
  "range",
  "referer",
  "te",
  "trailer",
  "transfer-encoding",
  "user-agent",
  "upgrade",
  "via",
  "warning",
  "upgrade-insecure-requests",
  "x-requested-with",
  "dnt",
  "x-forwarded-for",
  "x-forwarded-host",
  "x-forwarded-proto",
  "front-end-https",
  "x-http-method-override",
  "x-att-deviceid",
  "x-wap-profile",
  "proxy-connection",
  "x-uidh",
  "x-csrf-token",
  "x-request-id",
  "save-data",
  "sec-ch-ua",
  "sec-ch-ua-mobile",
  "sec-ch-ua-platform",
  "sec-fetch-site",
  "sec-fetch-mode",
  "sec-fetch-dest",
  "sec-fetch-user",
  "sec-fetch-site",
  ":authority",
  ":method",
  ":scheme",
  ":path",
] as const;
type IStandardHeader = typeof STANDARD_HEADERS[number];
const headerSet = new Set(STANDARD_HEADERS);

export const isStandardHeader = (header: string): header is IStandardHeader => {
  return Boolean(header) && headerSet.has(header.toLowerCase() as IStandardHeader);
};
