const STANDARD_HEADERS = [
  ":authority",
  ":method",
  ":path",
  ":scheme",
  ":status",
  "a-im",
  "accept",
  "accept-ch",
  "accept-ch-lifetime",
  "accept-charset",
  "accept-datetime",
  "accept-encoding",
  "accept-language",
  "accept-ranges",
  "access-control-allow-credentials",
  "access-control-allow-headers",
  "access-control-allow-methods",
  "access-control-allow-origin",
  "access-control-expose-headers",
  "access-control-max-age",
  "access-control-request-headers",
  "access-control-request-method",
  "age",
  "allow",
  "alternate-protocol",
  "amp-access-control-allow-source-origin",
  "cache-control",
  "connection",
  "content-disposition",
  "content-encoding",
  "content-language",
  "content-length",
  "content-md5",
  "content-security-policy",
  "content-security-policy-report-only",
  "content-type",
  "cookie",
  "cross-origin-resource-policy",
  "date",
  "dnt",
  "etag",
  "expect",
  "expect-ct",
  "expires",
  "forwarded",
  "from",
  "front-end-https",
  "host",
  "http2-settings",
  "if-match",
  "if-modified-since",
  "if-none-match",
  "if-range",
  "if-unmodified-since",
  "keep-alive",
  "last-modified",
  "location",
  "max-forwards",
  "origin",
  "origin-trial",
  "p3p",
  "pragma",
  "prefer",
  "proxy-authorization",
  "proxy-connection",
  "range",
  "referer",
  "referrer-policy",
  "save-data",
  "sec-ch-ua",
  "sec-ch-ua-mobile",
  "sec-ch-ua-platform",
  "sec-fetch-dest",
  "sec-fetch-mode",
  "sec-fetch-site",
  "sec-fetch-user",
  "server",
  "server-timing",
  "set-cookie",
  "strict-transport-security",
  "te",
  "timing-allow-origin",
  "trailer",
  "transfer-encoding",
  "upgrade",
  "upgrade-insecure-requests",
  "user-agent",
  "vary",
  "via",
  "warning",
  "x-att-deviceid",
  "x-csrf-token",
  "x-forwarded-for",
  "x-forwarded-host",
  "x-forwarded-proto",
  "x-frame-options",
  "x-frontend",
  "x-http-method-override",
  "x-powered-by",
  "x-request-id",
  "x-requested-with",
  "x-uidh",
  "x-wap-profile",
  "x-xss-protection",
] as const;
type IStandardHeader = typeof STANDARD_HEADERS[number];
const headerSet = new Set(STANDARD_HEADERS);

export const DEFAULT_AUTH_HEADERS = [
  "access-token",
  "api-key",
  "auth-token",
  "authorization",
  "authorization-token",
  "cookie",
  "key",
  "token",
  "x-access-token",
  "x-access-token",
  "x-api-key",
  "x-auth",
  "x-auth-token",
  "x-csrf-token",
  "secret",
  "x-secret",
  "access-key",
  "api-key",
  "apikey",
];
export const isStandardHeader = (header: string): header is IStandardHeader => {
  return Boolean(header) && headerSet.has(header.toLowerCase() as IStandardHeader);
};
